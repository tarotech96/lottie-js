{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["types","App","props","toggleAnimation","e","value","target","refValue","setRefValue","setState","animation_key","show","state","this","animationData","setAnimation","lottiie","loadAnimation","container","renderer","loop","autoplay","type","boxAnimation","coronaAnimation","handsAnimation","foreheadAnimation","box","corona","hands","forehead","Container","className","Button","variant","onClick","Row","Col","xs","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"252PAWMA,EACI,SADJA,EAEI,SAFJA,EAGG,QAHHA,EAIM,WA0GGC,E,kDArGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAwBRC,gBAAkB,SAACC,GACjB,IAAIC,EAAQD,EAAEE,OAAOD,MACjBE,EAAW,EAAKC,YAAYH,GAChC,EAAKI,SAAS,CACZC,cAAeL,EACfE,SAAUA,EACVI,MAAM,KA7BR,EAAKC,MAAQ,CACXF,cAAe,GACfH,SAAU,KACVI,MAAM,GALS,E,iEASG,IAAD,EACeE,KAAKD,MAAjCF,EADa,EACbA,cAAeH,EADF,EACEA,SACjBO,EAAgBD,KAAKE,aAAaL,GAClCH,GAEFS,IAAQC,cAAc,CACpBC,UAAWX,EACXY,SAAU,MACVC,MAAM,EACNC,UAAU,EACVP,cAAeA,M,mCAiBRQ,GACX,OAAQA,GACN,KAAKtB,EACH,OAAOuB,EACT,KAAKvB,EACH,OAAOwB,EACT,KAAKxB,EACH,OAAOyB,EACT,KAAKzB,EACH,OAAO0B,EACT,QACE,OAAO,Q,kCAKDrB,GACV,OAAQA,GACN,KAAKL,EACH,OAAOa,KAAKc,IACd,KAAK3B,EACH,OAAOa,KAAKe,OACd,KAAK5B,EACH,OAAOa,KAAKgB,MACd,KAAK7B,EACH,OAAOa,KAAKiB,SACd,QACE,OAAO,Q,+BAGH,IAAD,OACHnB,EAAOE,KAAKD,MAAMD,KACtB,OACE,kBAACoB,EAAA,EAAD,KACE,yBAAKC,UAAU,cACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAStB,KAAKV,gBAAiBE,MAAO,UAAxE,OACA,kBAAC4B,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAStB,KAAKV,gBAAiBE,MAAO,UAAxE,gBACA,kBAAC4B,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAStB,KAAKV,gBAAiBE,MAAO,SAAxE,gBACA,kBAAC4B,EAAA,EAAD,CAAQC,QAAQ,eAAeC,QAAStB,KAAKV,gBAAiBE,MAAO,YAArE,aAEF,kBAAC+B,EAAA,EAAD,KACE,yBAAKJ,UAAU,eACb,kBAACK,EAAA,EAAD,CAAKC,GAAI,GACN3B,EAAO,yBAAKqB,UAAU,MAAMO,IAAK,SAAAZ,GAAG,OAAI,EAAKA,IAAMA,KAAc,IAGpE,kBAACU,EAAA,EAAD,CAAKC,GAAI,GACN3B,EAAO,yBAAKqB,UAAU,SAASO,IAAK,SAAAX,GAAM,OAAI,EAAKA,OAASA,KAAiB,IAGhF,kBAACS,EAAA,EAAD,CAAKC,GAAI,GACN3B,EAAO,yBAAKqB,UAAU,QAAQO,IAAK,SAAAV,GAAK,OAAI,EAAKA,MAAQA,KAAgB,IAG5E,kBAACQ,EAAA,EAAD,CAAKC,GAAI,GACN3B,EAAO,yBAAKqB,UAAU,WAAWO,IAAK,SAAAT,GAAQ,OAAI,EAAKA,SAAWA,KAAmB,W,GA5FlFU,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84beee36.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport lottiie from 'lottie-web';\nimport './App.css';\nimport boxAnimation from './data/my_box.json';\nimport coronaAnimation from './data/corona.json';\nimport handsAnimation from './data/hands.json';\nimport foreheadAnimation from './data/forehead.json';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\n\n// declare types of animation\nconst types = {\n  MY_BOX: 'MY_BOX',\n  CORONA: 'CORONA',\n  HANDS: 'HANDS',\n  FOREHEAD: 'FOREHEAD'\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animation_key: '',\n      refValue: null,\n      show: false\n    }\n  }\n\n  componentDidUpdate() {\n    var { animation_key, refValue } = this.state;\n    var animationData = this.setAnimation(animation_key);\n    if (refValue) {\n      // using loadAnimation method of lotties library for load my animation \n      lottiie.loadAnimation({\n        container: refValue, // the dom element that will contain the animation\n        renderer: 'svg',\n        loop: true,\n        autoplay: true,\n        animationData: animationData\n      })\n    }\n  }\n\n  // create function toggleAnimation when cliked button\n  toggleAnimation = (e) => {\n    var value = e.target.value\n    var refValue = this.setRefValue(value);\n    this.setState({\n      animation_key: value,\n      refValue: refValue,\n      show: true\n    })\n  }\n\n  // create function setAnimation for set animationData of each button when click\n  setAnimation(type) {\n    switch (type) {\n      case types.MY_BOX:\n        return boxAnimation;\n      case types.CORONA:\n        return coronaAnimation;\n      case types.HANDS:\n        return handsAnimation;\n      case types.FOREHEAD:\n        return foreheadAnimation;\n      default:\n        return null;\n    }\n  }\n\n  // create function setRefValue for set ref value of each div tag which animation will be displayed \n  setRefValue(value) {\n    switch (value) {\n      case types.MY_BOX:\n        return this.box\n      case types.CORONA:\n        return this.corona;\n      case types.HANDS:\n        return this.hands;\n      case types.FOREHEAD:\n        return this.forehead;\n      default:\n        return null;\n    }\n  }\n  render() {\n    var show = this.state.show;\n    return (\n      <Container>\n        <div className=\"toggleBtns\">\n          <Button variant=\"outline-primary\" onClick={this.toggleAnimation} value={'MY_BOX'} >Box</Button>\n          <Button variant=\"outline-success\" onClick={this.toggleAnimation} value={'CORONA'} >Corona Virus</Button>\n          <Button variant=\"outline-warning\" onClick={this.toggleAnimation} value={'HANDS'} >Washing Hand</Button>\n          <Button variant=\"outline-info\" onClick={this.toggleAnimation} value={'FOREHEAD'} >Forehead</Button>\n        </div>\n        <Row>\n          <div className=\"myanimation\">\n            <Col xs={3}>\n              {show ? <div className=\"box\" ref={box => this.box = box}></div> : ''}\n            </Col>\n\n            <Col xs={3}>\n              {show ? <div className=\"corona\" ref={corona => this.corona = corona}></div> : ''}\n            </Col>\n\n            <Col xs={3}>\n              {show ? <div className=\"hands\" ref={hands => this.hands = hands}></div> : ''}\n            </Col>\n\n            <Col xs={3}>\n              {show ? <div className=\"forehead\" ref={forehead => this.forehead = forehead}></div> : ''}\n            </Col>\n          </div>\n        </Row>\n\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}